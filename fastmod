#!/usr/local/bin/python3.11 -S
"""\
fastmod: Multithreaded utility for recursively changing permissions.

Runs as a standalone script.
"""

__copyright__ = "Copyright (c) 2023 Broadcom Corporation. All rights reserved."
__license__ = "Public Domain"
__version__ = "1.1"

import getpass
import grp
import os
import multiprocessing as mp
import pwd
import sys
import time

DEFAULT_BLOCKSIZE = 128  # How many files to change per chmod/chgrp command.
PRESETS = {
    "baseline": {
        "fil": "u+rw,g+r-w,o+r-w",
        "dir": "u+rwx,g+rxs-w,o+rx-w"
    },
    "group-allowed": {
        "fil": "ug+rw,o+r-w",
        "dir": "ug+rwx,g+s,o+rx-w"
    },
    "private": {
        "fil": "u+rw,go-rwx",
        "dir": "u+rwx,g-rwx+s,o-rwx"
    },
    "readonly": {
        "fil": "a-w,+t",
        "dir": "a=rx,g+xs-w,o-w,+t"
    }
}

primary_group = grp.getgrgid(pwd.getpwnam(getpass.getuser()).pw_gid).gr_name

# MOCKUP FOR TESTING
# real_system = os.system
# def mock_system(cmd):
#     print(os.getpid(), cmd)
#     ret = real_system(cmd)
#     if ret != 0:
#         print(f"ERROR :: {cmd} failed with exit code {ret}")
# os.system = mock_system


def worker(queue, group, quiet):
    buffer = {}
    if quiet:
        chmod = f"chmod -f"
        chgrp = f"chgrp -f {group}"
    else:
        chmod = "chmod"
        chgrp = f"chgrp {group}"
    while True:
        root, name, perms = queue.get()
        if name == ".":
            path = root
        else:
            path = f"{root}/{name}"
        
        if root is None:
            break
        
        buffer.setdefault(perms, set()).add(path)
        
        buffered = buffer[perms]
        if len(buffered) >= blocksize:
            joined_paths = ' '.join([f"'{b}'" for b in buffered])
            if group is not None:
                os.system(f"{chgrp} " + joined_paths)
            os.system(f"{chmod} {perms} " + joined_paths)
            buffer[perms].clear()
    for perms, buffered in buffer.items():
        if not buffered:
            continue
        joined_paths = ' '.join([f"'{b}'" for b in buffered])
        if group is not None:
            os.system(f"{chgrp} " + joined_paths)
        os.system(f"{chmod} {perms} " + joined_paths)


if not sys.argv[1:]:
    print("fastmod: Multithreaded utility for recursively changing permissions.")
    print(__copyright__)
    print()
    print("Usage:")
    print(f"  fastmod PATH [FLAGS|PRESET] [-G<group>=<primary group>|-G] [-q]")
    print("               [-C<cores>] [-B<blocksize>]")
    print()
    print("Arguments:")
    print("  PATH is the path to change permissions of. If a directory, permissions are recursively changed.")
    print("  FLAGS is a chmod-style permission string, eg u+rx,g=rs,o+r-w,+t")
    print("  You can specify separate flags for files and directories with:")
    print("    file-perms:folder-perms     e.g. u+xs,g+x,o-w:g+s,o-w")
    print("  PRESET can be *one* of the presets below:")
    max_width = max(len(preset_name) for preset_name in PRESETS)
    perms_width = max(2, max(len(perms["fil"])+1+len(perms["dir"]) for perms in PRESETS.values()))
    print(f"    {'Preset Flag'.ljust(max_width+2)}    Permissions")
    print(f"    {'-'*(max_width+2)}    {'-'*perms_width}")
    for preset_name, perms in PRESETS.items():
        print(f"    --{preset_name.ljust(max_width)}    {perms['fil']}|{perms['dir']}")
    print("  Specify -G<group> to set group ownership, e.g. -Gusers.")
    print(f"  Specify -G to set group ownership to the user's primary group. ({primary_group})")
    print("     Omit -G to keep group ownership as it is.")
    print("  Specify -q to suppress most messages.")
    print(f"  Specify -C<cores> to set the number of cores to use. Else, defaults to number available. ({os.cpu_count()})")
    print(f"  Specify -B<blocksize> to set the number of files changed per batch. Else, defaults to {DEFAULT_BLOCKSIZE}.")
    print()
    print("Examples:")
    print("  fastmod .                            to set cwd to baseline perms (user read/write, group/others read-only)")
    print("  fastmod . --readonly -G              to set to all read-only perms and set group ownership to your primary")
    print("                                       group")
    print("  fastmod . --group-allowed -Gusers    to set cwd to user/group read/write, others read-only")
    print("                                       and set group ownership to 'users'")
    print("  fastmod . a+x -G                     to give everyone execute permissions and set group ownership to your")
    print("                                       primary group")
    sys.exit(1)

path = sys.argv[1]
if not os.path.exists(path):
    print(f"fastmod: path '{path}' does not exist")
    sys.exit(1)

perms_fil = PRESETS["baseline"]["fil"]
perms_dir = PRESETS["baseline"]["dir"]
group = None
set_group = False
ncpus = os.cpu_count()
blocksize = DEFAULT_BLOCKSIZE
quiet = False
for arg in sys.argv[2:]:
    if arg.startswith("-G"):
        set_group = True
        if arg == "-G":
            group = primary_group
        else:
            group = arg[2:]
    elif arg.startswith("-C"):
        ncpus = int(arg[2:])
    elif arg.startswith("-B"):
        blocksize = int(arg[2:])
    elif arg == "-q":
        quiet = True
    elif arg.startswith("--"):
        preset_name = arg[2:]
        if preset_name not in PRESETS:
            print(f"fastmod: preset '{preset_name}' does not exist")
            sys.exit(1)
        perms_fil = PRESETS[preset_name]["fil"]
        perms_dir = PRESETS[preset_name]["dir"]
    elif ":" in arg:
        try:
            perms_fil, perms_dir = arg.split(":")
        except ValueError:
            print("fastmod: specify multiple permission flags like 'file-perms|folder-perms'")
            print("e.g. 'u+xs,g+x,o-w:g+s,o-w'")
            sys.exit(1)
    else:
        perms_fil = arg
        perms_dir = arg

if not quiet:
    print(f"Setting file permissions:      {perms_fil}")
    print(f"Setting directory permissions: {perms_dir}")
    if set_group:
        print(f"Setting group ownership:       {group}")

if os.path.isdir(path):
    if not quiet:
        print(f"Using {ncpus} workers, block size {blocksize}")
    group_or_none = group if set_group else None
    queue = mp.Queue()
    workers = [mp.Process(target=worker, args=(queue, group_or_none, quiet)) for _ in range(ncpus)]
    start = time.time()
    [worker.start() for worker in workers]
    dirs = set()
    fils = set()
    dot = "."
    total = 0
    for root, folders, files in os.walk(path):
        queue.put_nowait((root, dot, perms_dir))
        total += 1
        for file in files:
            queue.put_nowait((root, file, perms_fil))
            total += 1

    [queue.put((None, None, None)) for _ in workers]
    [worker.join() for worker in workers]

    duration = time.time() - start
    print(f"Set permissions on {total} files in {duration:.03f} seconds ({duration/total:.05f} s/file; {total/duration:.01f} files/s)")
else:
    os.system(f"chmod {perms_fil} '{path}'")
    if set_group:
        os.system(f"chgrp {group} '{path}'")
    print("Done")
